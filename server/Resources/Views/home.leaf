#extend("base")

#export("head") {
    <title>Push Notification Server</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.5.1/themes/prism.min.css" integrity="sha256-vtR0hSWRc3Tb26iuN2oZHt3KRUomwTufNIf5/4oeCyg=" crossorigin="anonymous" />
}

#export("scripts") {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.5.1/prism.min.js" integrity="sha256-FYhw9hzKPuQpoFU1U+xqDo3Da3TMzk1HoHbV7sGEBd8=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.5.1/components/prism-swift.min.js" integrity="sha256-rwjYhu5yiHG1O4v8Ii81wmCjcHUtGWIk6tPVJp1NsQg=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.5.1/components/prism-json.min.js" integrity="sha256-Wuy432ctgn3/yO3GTKFOzFwy+XaYFeNg6aX7aN+Vwt0=" crossorigin="anonymous"></script>
}

#export("body") {
    <div class="mt-1">
        <h1>Push Notification Server</h1>
    </div>

    <p class="lead">
        This example <a href="http://vapor.codes" target="_new">vapor</a> based server will allow client <a href="/devices">devices</a> to register itself and
        then allows you to send custom push notifications to a registered device.
    </p>

    <div class="mt-1">
        <h2>Configure the server</h2>
    </div>

    <p>
    If you have not yet done so, you need to add a <code>apns.json</code> configuration file (<code>Config/secrets/apns.json</code>) which contains the team identifier used to sign your client iOS application and your Apple Push Notification Service (APNS) <a href="https://developer.apple.com/account/ios/certificate/"><code>Auth key</code></a> and the path to your never expiring APNS key (<code>.p8</code>):

        <pre><code class="language-json">
        {
            "teamIdentifier": "...teamid...",
            "APNSAuthKeyID": "...",
            "APNSAuthKeyPath": "/Users/you/somewhere/APNsAuthKey_teamid.p8"
        }
        </code></pre>
    </p>

    <div class="mt-1">
        <h2 id="clientSetup">Setting up the client</h2>
    </div>

    <p>
        How to register a client application in iOS 10 (using <a href="https://github.com/Alamofire/Alamofire" target="_new">Alamofire</a>), for example in <code>AppDelegate.swift</code>'s <code>didFinishLaunchingWithOptions</code> (and make sure you update the <code>url</code> to the proper ip or address of your server using the <code>/devices</code> endpoint):

        <pre><code class="language-swift">
        import UserNotifications
        import Alamofire

        @UIApplicationMain
        class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {
            ...

            func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
                // Override point for customization after application launch.
                registerForPushNotifications(application: application)
                return true
            }

            ...


            func registerForPushNotifications(application: UIApplication) {
                let center = UNUserNotificationCenter.current()
                center.delegate = self
                center.requestAuthorization(options: [.alert, .sound, .badge]) { (granted, error) in
                    guard granted else {
                        return
                    }

                    UIApplication.shared.registerForRemoteNotifications()
                }
            }
            
            func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
                let token = deviceToken.hexDescription
                
                let parameters: Parameters = [
                    "name": UIDevice.current.name,
                    "model": UIDevice.current.model,
                    "systemName": UIDevice.current.systemName,
                    "systemVersion": UIDevice.current.systemVersion,
                    "token": token,
                    "identifier": Bundle.main.bundleIdentifier ?? "unknown",
                    "version": Bundle.main.infoDictionary?["CFBundleShortVersionString"] ?? "unknown",
                    "build": Bundle.main.infoDictionary?["CFBundleVersion"] ?? "unknown",
                    "sandbox": _isDebugAssertConfiguration()
                ]
                
                let url = "http://your.server.address:8080/devices"

                Alamofire.request(url, method: .post, parameters: parameters, encoding: JSONEncoding.default).responseJSON { response in
                    switch response.result {
                        case .success(let json):
                            debugPrint("registered device token (\(json))")
                            break
                        case .failure(let error):
                            debugPrint("could not register device token (\(error))")
                            break
                    }
                }
            }
        }
        </code></pre>
    </p>
}
